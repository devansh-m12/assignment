#pragma once

#include <vector>
#include <cstdint>
#include <string>
#include <map>

// Define pre-shared keys for testing purposes
namespace SharedKeys {
    // Client serial ID - this would normally be a device-specific identifier
    const std::vector<uint8_t> clientSerialId = {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF};
    
    // Client key pair - in a real implementation, only the client would have the private key
    const std::vector<uint8_t> clientPrivateKey = {
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
        0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
        0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
        0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
    };
    
    // Public key corresponding to clientPrivateKey, precomputed for testing
    const std::vector<uint8_t> clientPublicKey = {
        0x04, 0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB,
        0xAC, 0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B,
        0x07, 0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28,
        0xD9, 0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8, 0x17,
        0x98, 0x48, 0x3A, 0xDA, 0x77, 0x26, 0xA3, 0xC4,
        0x65, 0x5D, 0xA4, 0xFB, 0xFC, 0x0E, 0x11, 0x08,
        0xA8, 0xFD, 0x17, 0xB4, 0x48, 0xA6, 0x85, 0x54,
        0x19, 0x9C, 0x47, 0xD0, 0x8F, 0xFB, 0x10, 0xD4,
        0xB8
    };
    
    // Server key pair - in a real implementation, only the server would have the private key
    const std::vector<uint8_t> serverPrivateKey = {
        0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
        0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
        0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
        0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40
    };
    
    // Public key corresponding to serverPrivateKey, precomputed for testing
    const std::vector<uint8_t> serverPublicKey = {
        0x04, 0x89, 0x44, 0x38, 0x35, 0xC9, 0x85, 0x02,
        0xD0, 0x67, 0x06, 0x50, 0xFD, 0x4B, 0x9D, 0x3A,
        0x83, 0x89, 0x7A, 0x21, 0x7F, 0x7B, 0x3F, 0x8A,
        0xA2, 0x92, 0x53, 0xD2, 0x25, 0x24, 0xD0, 0x93,
        0xB8, 0x12, 0x4D, 0x13, 0xD0, 0x3C, 0x8C, 0xE2,
        0x41, 0x24, 0x3B, 0x1D, 0x91, 0xCB, 0x95, 0xCE,
        0x2B, 0xC1, 0x7B, 0x9D, 0xA1, 0xDD, 0x92, 0x88,
        0xA1, 0x17, 0x11, 0xC7, 0xBB, 0xB1, 0xFC, 0x2A,
        0x94
    };
    
    // Helper function to create a client database for the server
    static std::map<std::vector<uint8_t>, std::vector<uint8_t>> createClientDatabase() {
        std::map<std::vector<uint8_t>, std::vector<uint8_t>> clientKeys;
        clientKeys[clientSerialId] = clientPublicKey;
        return clientKeys;
    }
}; 